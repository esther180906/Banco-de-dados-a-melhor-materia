DELIMITER //
CREATE PROCEDURE sp_ListarAutores()
BEGIN
  SELECT * FROM Autor;
END;
//
DELIMITER ;

CALL sp_ListarAutores();


DELIMITER //
CREATE PROCEDURE sp_LivrosPorCategoria(IN categoriaNome VARCHAR(100))
BEGIN
  SELECT Livro.Titulo
  FROM Livro
  INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
  WHERE Categoria.Nome = categoriaNome;
END;
//
DELIMITER ;

CALL sp_LivrosPorCategoria('Ficção Científica');


DELIMITER //
CREATE PROCEDURE sp_ContarLivrosPorCategoria(IN categoriaNome VARCHAR(100), OUT totalLivros INT)
BEGIN
  SELECT COUNT(*) INTO totalLivros
  FROM Livro
  INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
  WHERE Categoria.Nome = categoriaNome;
END;
//
DELIMITER ;

DECLARE @total INT;
CALL sp_ContarLivrosPorCategoria('Ficção Científica', @total);
SELECT @total;


DELIMITER //
CREATE PROCEDURE sp_VerificarLivrosCategoria(IN categoriaNome VARCHAR(100), OUT possuiLivros BOOLEAN)
BEGIN
  DECLARE total INT;
  CALL sp_ContarLivrosPorCategoria(categoriaNome, total);
  
  IF total > 0 THEN
    SET possuiLivros = TRUE;
  ELSE
    SET possuiLivros = FALSE;
  END IF;
END;
//
DELIMITER ;

DECLARE @temLivros BOOLEAN;
CALL sp_VerificarLivrosCategoria('Ficção Científica', @temLivros);
SELECT @temLivros;


DELIMITER //
CREATE PROCEDURE sp_LivrosAteAno(IN anoLimite INT)
BEGIN
  SELECT Titulo, Ano_Publicacao
  FROM Livro
  WHERE Ano_Publicacao <= anoLimite;
END;
//
DELIMITER ;

CALL sp_LivrosAteAno(2020);


DELIMITER //
CREATE PROCEDURE sp_TitulosPorCategoria(IN categoriaNome VARCHAR(100))
BEGIN
  SELECT Livro.Titulo
  FROM Livro
  INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
  WHERE Categoria.Nome = categoriaNome;
END;
//
DELIMITER ;

CALL sp_TitulosPorCategoria('Ficção Científica');


DELIMITER //

CREATE PROCEDURE sp_AdicionarLivro(
  IN tituloLivro VARCHAR(255),
  IN editoraID INT,
  IN anoPublicacao INT,
  IN numeroPaginas INT,
  IN categoriaID INT,
  OUT resultado VARCHAR(255)
)
BEGIN
  DECLARE EXIT HANDLER FOR 1062
  BEGIN
    SET resultado = 'Erro: O título do livro já existe na tabela.';
  END;

  INSERT INTO Livro (Titulo, Editora_ID, Ano_Publicacao, Numero_Paginas, Categoria_ID)
  VALUES (tituloLivro, editoraID, anoPublicacao, numeroPaginas, categoriaID);
  
  SET resultado = 'Livro adicionado com sucesso.';
END;
//

DELIMITER ;

DECLARE @resultado VARCHAR(255);
CALL sp_AdicionarLivro('Novo Livro', 1, 2023, 300, 1, @resultado);
SELECT @resultado;


DELIMITER //

CREATE PROCEDURE sp_AutorMaisAntigo(OUT nomeAutorMaisAntigo VARCHAR(255))
BEGIN
  SELECT Autor.Nome
  INTO nomeAutorMaisAntigo
  FROM Autor
  WHERE Autor.Data_Nascimento = (
    SELECT MIN(Data_Nascimento)
    FROM Autor
  );
END;
//

DELIMITER ;

DECLARE @nomeMaisAntigo VARCHAR(255);
CALL sp_AutorMaisAntigo(@nomeMaisAntigo);
SELECT @nomeMaisAntigo;


DELIMITER //

/* Criação da Stored Procedure sp_AdicionarLivro */
CREATE PROCEDURE sp_AdicionarLivro(
  IN tituloLivro VARCHAR(255),
  IN editoraID INT,
  IN anoPublicacao INT,
  IN numeroPaginas INT,
  IN categoriaID INT,
  OUT resultado VARCHAR(255)  -- Parâmetro de saída para a mensagem de resultado
)
BEGIN
  /* Manipulador de exceções para tratar tentativas de inserir um título de livro duplicado */
  DECLARE EXIT HANDLER FOR 1062
  BEGIN
    SET resultado = 'Erro: O título do livro já existe na tabela.';
  END;

  /* Inserção do novo livro na tabela Livro */
  INSERT INTO Livro (Titulo, Editora_ID, Ano_Publicacao, Numero_Paginas, Categoria_ID)
  VALUES (tituloLivro, editoraID, anoPublicacao, numeroPaginas, categoriaID);
  
  /* Definição da mensagem de sucesso no parâmetro de saída */
  SET resultado = 'Livro adicionado com sucesso.';
END;
//

DELIMITER ;

